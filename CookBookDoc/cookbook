Cookbook Project Documentation
Introduction
Project Title: Cookbook Web Application
Team Members: 
Team ID : SWTID1741176409146391
Team Members	Email Id
Team Leader : TEENU ANAND P	teenuanandanand@gmail.com
Team member : VIGNESH S	vigneshsrinivasan056@gmail.com
Team member : SAMINATHAN P	sami2005nathan@gmail.com
Team member : DHANALAKSHMI D	kumar1311sathish@gmail.com
Team member : Sathish kumar M	dhanalakshmi20047@gmail.com


Project Overview
Purpose
The Cookbook project is a web application built using React.js with Vite. It allows users to browse, manage, and share recipes easily. The goal is to provide a user-friendly platform for food lovers and home chefs to organize their favorite recipes.
Features
â€¢	User Authentication - Secure login and signup functionality.
â€¢	Recipe Management - Users can add, edit, and delete recipes.
â€¢	Search & Filters - Advanced search options to find recipes easily.
â€¢	Favorites & Bookmarks - Users can save their favorite recipes.
â€¢	Responsive Design - Optimized for mobile and desktop use.


Architecture

Component Structure
The application follows a modular component-based architecture:
â€¢	App.jsx - The main entry component.
â€¢	Header.jsx - Navigation bar component.
â€¢	Home.jsx - Displays a list of recipes.
â€¢	RecipeCard.jsx - A reusable component for individual recipe display.
â€¢	RecipeForm.jsx - Form to add/edit recipes.
â€¢	Footer.jsx - Footer section.
State Management
â€¢	Uses Context API for managing global state.
â€¢	RecipeContext.jsx handles recipe-related data across components.
â€¢	Local state is used within individual components for UI interactions.
Routing
â€¢	Uses react-router-dom for navigation between pages.
â€¢	Example routes: 
o	/ â†’ Home Page
o	/recipe/:id â†’ Recipe Details Page
o	/add-recipe â†’ Add New Recipe Page

Setup Instructions
Prerequisites
â€¢	Install Node.js (latest stable version recommended)
Installation
1.	Clone the repository: 
2.	git clone https://github.com/yourusername/cookbook.git
3.	Navigate to the project directory: 
4.	cd cookbook
5.	Install dependencies: 
6.	npm install
7.	Start the development server: 
8.	npm run dev

Folder Structure
ðŸ“¦ cookbook
 â”£ ðŸ“‚ src
 â”ƒ â”£ ðŸ“‚ components
 â”ƒ â”ƒ â”£ ðŸ“œ Header.jsx
 â”ƒ â”ƒ â”£ ðŸ“œ Footer.jsx
 â”ƒ â”ƒ â”£ ðŸ“œ RecipeCard.jsx
 â”ƒ â”ƒ â”— ðŸ“œ RecipeForm.jsx
 â”ƒ â”£ ðŸ“‚ pages
 â”ƒ â”ƒ â”£ ðŸ“œ Home.jsx
 â”ƒ â”ƒ â”— ðŸ“œ RecipeDetails.jsx
 â”ƒ â”£ ðŸ“‚ context
 â”ƒ â”ƒ â”— ðŸ“œ RecipeContext.jsx
 â”ƒ â”£ ðŸ“œ App.jsx
 â”ƒ â”— ðŸ“œ main.jsx
 â”£ ðŸ“‚ public
 â”£ ðŸ“œ package.json
 â”£ ðŸ“œ vite.config.js
 â”— ðŸ“œ README.md

Running the Application
â€¢	Run the frontend locally: 
â€¢	npm run dev

Component Documentation
Key Components
RecipeCard.jsx
import React, { useEffect } from 'react';
import YouTube from 'react-youtube';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';

const Recipie = () => {
  return (
    <>
      <div className="recipe-page">
        {recipie ? (
          <div className="recipe-container">
            {/* Recipe Header: Image and Ingredients */}
            <div className="recipe-header">
              <div className="recipe-img">
                <img
                  src={recipie.strMealThumb}
                  alt="food-item"
                  className="recipe-image"
                />
              </div>

              <div className="ingredients-container">
                <h3>Ingredients</h3>
                <ul className="ingredients-list">
                  {Object.entries(recipie).map(([key, value]) => {
                    if (key.startsWith('strIngredient') && value) {
                      const ingredientNumber = key.slice('strIngredient'.length);
                      const measure =
                        recipie[`strMeasure${ingredientNumber}`] || '';
                      return (
                        <li key={key} className="ingredient">
                          <h5>{value}</h5>
                          <p>{measure}</p>
                        </li>
                      );
                    }
                    return null;
                  })}
                </ul>
              </div>
            </div>


            {/* Recipe Details: Procedure, Area, Category */}
            <div className="recipe-details">
              <h4>{recipie.strMeal}</h4>
              <div className="recipe-specials">
                <p>{recipie.strArea && recipie.strArea}</p>
                <p>{recipie.strCategory && recipie.strCategory}</p>
              </div>

              <div className="procedure">
                <h5>Procedure</h5>
                <p>{recipie.strInstructions}</p>
              </div>
            </div>
            {/* YouTube Video */}
            {recipie.strYoutube && (
              <div className="youtube-video-container">
                <h5>Video Tutorial</h5>
                <YouTube
                  className="youtube-video"
                  videoId={recipie.strYoutube.slice(32)}
                  opts={{
                    height: '315',
                    width: '560',
                  }}
                />
              </div>
            )}
          </div>
        ) : (
          <p className="loader"></p>
        )}
      </div>
    </>
  );

export default Recipie;

Reusable Components
â€¢	Header.jsx - Navigation bar
â€¢	Footer.jsx - Bottom section
â€¢	RecipeCard.jsx - Displays a single recipe card
â€¢	RecipeForm.jsx - Handles recipe creation/editing


State Management
Global State
â€¢	Managed using Context API in RecipeContext.jsx.
â€¢	Provides recipes data to all components.
Local State
â€¢	Used within components for UI handling, such as form inputs.

User Interface
Styling
â€¢	CSS: Normal CSS.
â€¢	Theming: Custom styles for buttons, cards, and navigation.
Testing
â€¢	Testing Strategy: Uses Jest and React Testing Library for unit tests.
â€¢	Code Coverage: Ensures key components have sufficient test coverage.
Screenshots or Demo
 
Home Page
 
Cateogory Page
 

Demo Link: https://drive.google.com/file/d/1pLQJp4xJwkfMcZhke4kSkAIHXBl7TkcF/view?usp=drive_link
Known Issues
â€¢	Recipe images are not stored persistently yet.
â€¢	Filtering options need refinement.
Future Enhancements
â€¢	Implement dark mode.
â€¢	Add a comments section for each recipe.
â€¢	Improve search functionality with category-based filters.

